---
sync_devices:
  hostname:
    commands:
      - command: "show system"
        parser: "textfsm"
        jpath: "[*].hostname"
  serial:
    commands:
      - command: "show system"
        parser: "textfsm"
        jpath: "[*].serial[]"
        post_processor: "{{ obj | unique | first }}"
        iterable_type: "str"
  device_type:
    commands:
      - command: "show system"
        parser: "textfsm"
        jpath: "[*].product[]"
        post_processor: "{{ obj | unique | first }}"
        iterable_type: "str"
  mgmt_interface:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?contains(ip_address, `{{ obj }}/`)].{name: interface, enabled: link_status}"
        post_processor: "{{ (obj | selectattr('enabled', 'eq', 'up') | list | first ).name }}"
  mask_length:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?contains(ip_address, `{{ obj }}/`)].ip_address"
        post_processor: "{{ obj[0].split('/')[1] }}"
        iterable_type: "int"
sync_network_data:
  pre_processor:
    vlan_map:
      commands:
        - command: "show vlan"
          parser: "textfsm"
          jpath: "[*].[$vlan_id$,vlan_name]"
          post_processor: "{{ obj | flatten_list_of_dict_from_value('vlan_name') | tojson }}"
  software_version:
    commands:
      - command: "show system"
        parser: "textfsm"
        jpath: "[*].version"
  serial:
    commands:
      - command: "show system"
        parser: "textfsm"
        jpath: "[*].serial"
  interfaces:
    root_key: true
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[*].interface"
        post_processor: "{% set result={} %}{% for interface in obj %}{{ result.update({interface: {}}) or '' }}{% endfor %}{{ result | tojson }}"
  interfaces__type:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].hw_type"
        post_processor: "{% if 'lag' in current_key %}{{ 'lag' }}{% else %}{{ obj[0] | lower | map_interface_type }}{% endif %}"
  interfaces__ip_addresses:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{ip_address: ip_address}"
        post_processor: "{% if obj and obj[0]['ip_address'] and '/' in obj[0]['ip_address'] %}{% set cidr = obj[0]['ip_address'].split('/') %}{% set ip = cidr[0] %}{% set mask = cidr[1] | int %}{{ obj[0].update({'ip_address': ip, 'prefix_length': mask}) or obj | tojson }}{% else %}{{ obj | tojson }}{% endif %}"
        iterable_type: "list"
  interfaces__mtu:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mtu"
        iterable_type: "str"
  interfaces__mac_address:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mac_address"
  interfaces__description:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].interface_desc"
  interfaces__link_status:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].link_status"
        post_processor: "{{ obj[0] | interface_status_to_bool }}"
  interfaces__802.1Q_mode:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{mode: vlan_mode, trunking_vlans: vlan_trunk}"
        post_processor: "{% if obj and 'tagged' in obj[0]['mode'] %}{{ 'tagged' }}{% else %}{{ 'access' }}{% endif %}"
        iterable_type: "str"
  interfaces__lag:
    commands:
      - command: "show interface | begin lag"
        parser: "textfsm"
        jpath: "[?contains(@.aggregated_interfaces, `{{ current_key }}`)].interface"
        post_processor: "{% if obj | length > 0 %}{{ obj[0] | canonical_interface_name }}{% else %}{{ obj }}{% endif %}"
        iterable_type: "str"
  interfaces__vrf:
    commands:
      - command: "show vrf"
        parser: "textfsm"
        jpath: "[?contains(@.vrf_interfaces, `{{ current_key }}`)].{name:vrf_name}"
        post_processor: "{% if obj | length > 0 %}{{ obj[0] | key_exist_or_default('name') | tojson }}{% else %}{{ {} | tojson }}{% endif %}"
        iterable_type: "dict"
  interfaces__tagged_vlans:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{mode: vlan_mode, access_vlan: vlan_access, trunking_vlans: vlan_trunk, native_vlan: vlan_native}"
        post_processor: "{% if obj and 'tagged' in obj[0]['mode'] and obj[0]['trunking_vlans'] %}{% set result = [] %}{% for vlan in obj[0]['trunking_vlans'] %}{% if vlan in vlan_map and vlan != obj[0]['native_vlan'] %}{% set _=result.append({'id': vlan, 'name': vlan_map[vlan]}) %}{% endif %}{% endfor %}{{ result | tojson }}{% else %}{{ [] | tojson }}{% endif %}"
  interfaces__untagged_vlan:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{mode: vlan_mode, access_vlan: vlan_access, trunking_vlans: vlan_trunk, native_vlan: vlan_native}"
        iterable_type: "dict"
        post_processor: "{% if obj and 'tagged' in obj[0]['mode'] and obj[0]['native_vlan'] in vlan_map %}{{ {'id': obj[0]['native_vlan'], 'name': vlan_map[obj[0]['native_vlan']]} | tojson }}{% elif obj and 'access' in obj[0]['mode'] and obj[0]['access_vlan'] in vlan_map %}{{ {'id': obj[0]['access_vlan'], 'name': vlan_map[obj[0]['access_vlan']]} | tojson }}{% else %}{{ [] | tojson }}{% endif %}"
  cables:
    commands:
      - command: "show lldp neighbor-info detail"
        parser: "textfsm"
        jpath: "[*].{local_interface:local_interface, remote_interface:neighbor_port_id, remote_device:neighbor_name}"
        post_processor: "{% set result = [] %}{% for cable in obj %}{% set _=result.append({'local_interface': cable['local_interface'], 'remote_interface': cable['remote_interface'], 'remote_device': cable['remote_device'] | remove_fqdn }) %}{% endfor %}{{ result | tojson }}"
