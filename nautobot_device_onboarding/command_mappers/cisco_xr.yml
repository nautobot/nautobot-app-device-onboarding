---
sync_devices:
  hostname:
    commands:
      - command: "show running-config hostname"
        parser: "textfsm"
        jpath: "[*].hostname"
  serial:
    commands:
      - command: "show inventory"
        parser: "textfsm"
        jpath: "[?name=='Rack 0'].sn | [0]"
  device_type:
    commands:
      - command: "show version"
        parser: "textfsm"
        jpath: "[*].hardware"
  mgmt_interface:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?hardware_type=='Management Ethernet']"
        post_processor: "{{ (obj | selectattr('link_status', 'eq', 'up') | list | first ).interface }}"
  mask_length:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?hardware_type=='Management Ethernet']"
        post_processor: "{{ (obj | selectattr('link_status', 'eq', 'up') | list | first ).ip_address.split('/')[1] }}"
        iterable_type: "int"
sync_network_data:
  pre_processor:
    vlan_map:
      commands:
        - command: "show interface"
          parser: "textfsm"
          jpath: "[?hardware_type=='VLAN' && vlan_id!=''].{vlan: vlan_id, interface: interface}"
          post_processor: "{{ obj | sort | tojson }}"
  serial:
    commands:
      - command: "show inventory"
        parser: "textfsm"
        jpath: "[?name=='Rack 0'].sn | [0]"
  interfaces:
    root_key: true
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[*].interface"  #  when root_key=true this extracted value is what becomes interable in keys using __ under `current_key`.
        post_processor: "{% set result={} %}{% for interface in obj %}{{ result.update({interface: {}}) or '' }}{% endfor %}{{ result | tojson }}"
  interfaces__type:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].hardware_type"
        post_processor: "{{ obj[0] | map_interface_type }}"
  interfaces__ip_addresses:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{ip_address: ip_address}"
        post_processor: |
          {%- set ip = obj[0].ip_address -%}
          {% if '/' in ip %}
          [{"ip_address": "{{ ip.split('/')[0] }}", "prefix_length": {{ ip.split('/')[1] | int }} }]
          {%- elif  "Unknown" in ip -%}
          [{"ip_address": "", "prefix_length": ""}]
          {%- else -%}
          [{"ip_address": "{{ ip }}", "prefix_length": ""}]
          {%- endif -%}
  interfaces__mtu:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mtu"
        iterable_type: "str"
  interfaces__mac_address:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mac_address"
  interfaces__description:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].description"
  interfaces__link_status:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].link_status"
        post_processor: "{{ obj[0] | interface_status_to_bool }}"
  interfaces__802.1Q_mode:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key | abbreviated_interface_name }}'].{admin_mode: admin_mode, mode: mode, trunking_vlans: trunking_vlans}"
        post_processor: "{{ obj | interface_mode_logic }}"
        iterable_type: "str"
  interfaces__lag:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?hardware_type=='Aggregated Ethernet']"
        post_processor: "{{ '' }}"  # Force empty
        iterable_type: "str"
  interfaces__vrf:
    commands:
      - command: "show ipv4 vrf all interface brief"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{name:vrf}"
        post_processor: |
          {% if obj | length > 0 %}
            {% set vrf = obj[0]['name'] if 'name' in obj[0] and obj[0]['name'] else 'default' %}
            {{ {'name': vrf} | tojson }}
          {% else %}
            {{ {'name': 'default'} | tojson }}
          {% endif %}
        iterable_type: "dict"
  interfaces__tagged_vlans:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key | abbreviated_interface_name }}'].{admin_mode: admin_mode, mode: mode, access_vlan: access_vlan, trunking_vlans: trunking_vlans, native_vlan: native_vlan}"
        post_processor: "{{ obj | get_vlan_data(vlan_map, 'tagged') | tojson }}"
  interfaces__untagged_vlan:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key | abbreviated_interface_name }}'].{admin_mode: admin_mode, mode: mode, access_vlan: access_vlan, trunking_vlans: trunking_vlans, native_vlan: native_vlan}"
        post_processor: "{{ obj | get_vlan_data(vlan_map, 'untagged') | tojson }}"
        iterable_type: "dict"
  cables:
    commands:
      - command: "show cdp neighbors detail"
        parser: "textfsm"
        jpath: "[*].{local_interface:local_interface, remote_interface:neighbor_interface, remote_device:neighbor_name}"
        post_processor: "{% set result = [] %}{% for cable in obj %}{% set _=result.append({'local_interface': cable['local_interface'], 'remote_interface': cable['remote_interface'], 'remote_device': cable['remote_device'] | remove_fqdn }) %}{% endfor %}{{ result | tojson }}"
